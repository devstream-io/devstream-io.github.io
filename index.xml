<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevStream – DevStream blog</title><link>https://www.devstream.io/</link><description>Recent content in DevStream blog on DevStream</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://www.devstream.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: 9 Extraordinary Terraform Best Practices That Will Change Your Infra World</title><link>https://www.devstream.io/blog/9-extraordinary-terraform-best-practices-that-will-change-your-infra-world/</link><pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.devstream.io/blog/9-extraordinary-terraform-best-practices-that-will-change-your-infra-world/</guid><description>
&lt;img src="https://www.devstream.io/blog/9-extraordinary-terraform-best-practices-that-will-change-your-infra-world/featured-background_hue3380180632e3277a681d06ca14cda6b_666339_640x0_resize_q75_catmullrom.jpg" width="640" height="427"/>
&lt;p>&lt;em>Note: this article is orignally published at &lt;a href="https://blog.gitguardian.com/9-extraordinary-terraform-best-practices/">GitGuardian Blog&lt;/a>.&lt;/em>&lt;/p>
&lt;p>Before you quickly glance over the title and think &amp;ldquo;Oh god, yet another tutorial on how to give proper names to variables, how to use modules, how to manage states; nothing I haven&amp;rsquo;t already know&amp;rdquo; then close the tab right away, let me assure you this: this article is none of those.&lt;/p>
&lt;p>This &amp;ldquo;best practices&amp;rdquo; article aims to tell you something you haven&amp;rsquo;t read a hundred times. This article won&amp;rsquo;t give you the answer to everything because there isn&amp;rsquo;t one right answer that fits all. This article aims to make you think about your unique situation and make the best decisions by you and for you.&lt;/p>
&lt;p>Without further adieu, let&amp;rsquo;s start with writing Terraform code:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1210px">
&lt;img class="card-img-top" src="https://www.devstream.io/blog/9-extraordinary-terraform-best-practices-that-will-change-your-infra-world/featured-background_hue3380180632e3277a681d06ca14cda6b_666339_1200x800_fill_q75_catmullrom_smart1.jpg" width="1200" height="800">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Pidu District, Chengdu, China.
&lt;small class="text-muted">&lt;br/>Photo: Tiexin Guo / CC-BY-CA&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="1-clean-code">1 Clean Code&lt;/h2>
&lt;p>No tool or programming language is perfect, and Terraform is no different. It has limitations.&lt;/p>
&lt;p>For example, for old Terraform users from 0.12 or even earlier age, you might remember that before Terraform 0.13, you can&amp;rsquo;t even use &lt;code>for_each&lt;/code> for modules. In August 2020, with the release of Terraform 0.13, HashiCorp finally introduced the ability to loop over modules with a single module call.&lt;/p>
&lt;p>Once you have accepted the quirks and features, you can utilize a bunch of best practices to organize your code and to use it better. Even though Terraform isn&amp;rsquo;t strictly a programming language, similar rules of writing code apply to Terraform as well.&lt;/p>
&lt;p>But before we talk about Terraform code, let&amp;rsquo;s have a quick look at coding or programming in general.&lt;/p>
&lt;h3 id="11-on-code">1.1 On &amp;ldquo;Code&amp;rdquo;&lt;/h3>
&lt;p>I want to start this conversation by quoting Knuth:&lt;/p>
&lt;blockquote>
&lt;p>Programs are meant to be read by humans and only incidentally for computers to execute.&lt;/p>
&lt;/blockquote>
&lt;p>The computer has no problem with ambiguous variable names, extended functions, or a single file of thousands of lines of code. It will still execute properly. All the methodologies and ideas like refactoring, clean code, naming conventions, modules, packages, code smell, etc., are invented so that we &lt;em>humans&lt;/em> can read the code better, not computers can run it better.&lt;/p>
&lt;h3 id="12-code-evolving-code">1.2 Code, Evolving Code&lt;/h3>
&lt;p>Programs evolve. Code changes.&lt;/p>
&lt;p>It&amp;rsquo;s rare that you finished a piece of code and leave it there for the rest of your life. But that&amp;rsquo;s not how projects work. If that was the case, we wouldn&amp;rsquo;t be talking about Terraform best practices: you would only use it once anyway.&lt;/p>
&lt;p>It&amp;rsquo;s normal that when we are at work, we have projects all the time. The time when there isn&amp;rsquo;t any project is scarce. Because business wants to improve, and the project is the way to move from the current state to the next desired state. Changing from one state to another is &amp;ldquo;project&amp;rdquo;. By Nature, &amp;ldquo;project&amp;rdquo; means change, and the code is also changing constantly.&lt;/p>
&lt;h3 id="13-writing-clean-code">1.3 Writing Clean Code&lt;/h3>
&lt;p>In order to make the change more manageable, we write clean code.&lt;/p>
&lt;p>We limit the length of the line width because humans are not good at reading very wide lines of words; we carefully choose the names of the variables so that we immediately know what it means the next time we read it; we try to reduce the length of functions because shorter functions are not only easier to test but also easier to understand; we try to split a file with thousands of lines of code into smaller chunks.&lt;/p>
&lt;p>Computers don&amp;rsquo;t care about any of these, at all. Be it one large file or ten smaller chunks of files, it will run. Clean code makes it easier and faster to read, to understand, to build upon it.&lt;/p>
&lt;p>You may already understand where I&amp;rsquo;m going with this, and you are right: we want to do whatever it is so that our code is easier to read, manage, and change.&lt;/p>
&lt;h3 id="14-write-clean-terraform-code">1.4 Write Clean Terraform Code&lt;/h3>
&lt;p>I don&amp;rsquo;t need to tell you how to name your variables, why it&amp;rsquo;s a bad practice to name a server &amp;ldquo;test-server&amp;rdquo; while it&amp;rsquo;s in the production environment, should you add a tag to a resource or not, etc.&lt;/p>
&lt;p>Use your best judgment.&lt;/p>
&lt;p>Do whatever it is to make the code manageable (or just Google and read any other available Terraform best practices out there.)&lt;/p>
&lt;hr>
&lt;h2 id="2-know-your-stuff">2 Know Your Stuff&lt;/h2>
&lt;h3 id="21-play-with-it-first">2.1 Play with It First&lt;/h3>
&lt;p>For people who are new to the cloud or new to a specific service in the cloud, I don&amp;rsquo;t recommend using Terraform as the first attempt to create that resource. This is true no matter which IaC tool you are using, not specific to Terraform.&lt;/p>
&lt;p>First, go to the console, try things manually, read the official documents and FAQs, figure out what parameters are mandatory and what are optional, and what are the possible values for each specific parameter. This would definitely help. Don&amp;rsquo;t worry because some big guy in the DevOps world told you that &amp;ldquo;the moment you click a button in the console, you create technical debt.&amp;rdquo; Forget about it. Get comfortable with it first.&lt;/p>
&lt;p>Once you grasp the keys of the resource you are going to create, you can automate it using Terraform.&lt;/p>
&lt;p>For experienced Terraform users, see if this relates to you: AWS released a new service or a new resource. You haven&amp;rsquo;t used it yet. You tell yourself: &amp;ldquo;I&amp;rsquo;m a veteran; only noob plays with console. I&amp;rsquo;ll just get started with a perfect Terraform module right away. Why bother playing with it in the console first anyway?&amp;rdquo; Then after hours of working and debugging, you find out that you are stuck only because of a small parameter or configuration of the resource which you didn&amp;rsquo;t figure out clearly in the first place.&lt;/p>
&lt;h3 id="22-know-your-infrastructure">2.2 Know Your Infrastructure&lt;/h3>
&lt;p>You need to know what exactly is created and managed by your Terraform code.&lt;/p>
&lt;p>This is especially important when using third-party modules because there are so many parameters and different use cases, it&amp;rsquo;s hard to know exactly which scenario to pick, what resources will be created, and what values to set for those bunch of parameters.&lt;/p>
&lt;p>Oftentimes, when I need to provision some resources in the cloud using Terraform, I find that I can do it quicker if I write the resources and modules myself (of course, I could also re-use modules I wrote before) than finding a third-party module off the internet because a lot of third-party modules are heavily future-proofed; they try to solve everybody&amp;rsquo;s problem with the same module: they are doing it the &amp;ldquo;monolithic&amp;rdquo; way.&lt;/p>
&lt;p>Here I don&amp;rsquo;t mean to assign blame to anybody, but for example, if you try to search a module, like EKS, from Terraform registry, you will find out that it has a whopping 62 input parameters. If you want to create an EKS cluster in an existing VPC, using self-managed worker nodes, with certain launch templates, what parameters to set? Have fun figuring that out.&lt;/p>
&lt;p>Sometimes, &amp;ldquo;do not re-use the wheel&amp;rdquo; is the better way to go: Terraform isn&amp;rsquo;t easy to get started, but once you get fluent with it, it&amp;rsquo;s relatively easy to use. Creating a resource or a module isn&amp;rsquo;t rocket science. You can manage it within a reasonable period of time. Weigh the advantages and disadvantages of using third-party modules before you decide.&lt;/p>
&lt;hr>
&lt;h2 id="3-the-myth-of-future-proof">3 The Myth of Future-Proof&lt;/h2>
&lt;p>When you only need one feature, implement one, don&amp;rsquo;t even try to implement another feature you might use in the future. Premature future-proof or over-future-proof generates not-so-clean code. This is also true even if you are using another Infrastructure as Code tool other than Terraform.&lt;/p>
&lt;p>Many &amp;ldquo;best practices&amp;rdquo; would tell you to never use a local backend, always use a remote backend, run your Terraform from within a CI tool, always use modules, etc.&lt;/p>
&lt;p>I&amp;rsquo;m telling you none of those.&lt;/p>
&lt;p>Because &lt;em>there is no &amp;ldquo;one-size-fits-all&amp;rdquo; answer; it all depends.&lt;/em>&lt;/p>
&lt;p>For a simple example, if I&amp;rsquo;m working with a minimum viable product (MVP) or even a proof of concept (POC), why bother wasting time creating a remote state with state lock and executing the job from a CI running in K8s in the cloud and creating ridiculously small modules just to have modules because others told you it&amp;rsquo;s &amp;ldquo;best practice&amp;rdquo; to do so?&lt;/p>
&lt;p>You can&amp;rsquo;t possibly know what you exactly are going to need in the future. Chances are, even if you did some future-proof work, created some perfect module, and set up perfect remote state management, in the future, when you really need to use it, you would probably refactor it anyway. It&amp;rsquo;s not like creating a module is hard. It isn&amp;rsquo;t; it&amp;rsquo;s not rocket science.&lt;/p>
&lt;p>When you try to future-proof your code, you write if-else. You write conditions and branches so that your code could work for more than one scenario. Refactor is all about reducing if-else and simplifying the code. Why introduce complexity when you don&amp;rsquo;t really need it now?&lt;/p>
&lt;p>But hey, don&amp;rsquo;t get me wrong: I&amp;rsquo;m not telling you to give up modules and remote states and some fancy features and what have you; the point is, creating a flexible base so that it could adapt to possible future changes, but don&amp;rsquo;t waste too much time and energy future-proofing it.&lt;/p>
&lt;hr>
&lt;h2 id="4-do-one-thing-and-do-it-right">4 Do One Thing and Do It Right&lt;/h2>
&lt;p>Just like the example given in the previous section, there are too many examples of Terraform modules and code that try to be the &amp;ldquo;complete package&amp;rdquo; by supporting every single possible scenario.&lt;/p>
&lt;p>For experienced Terraform users, you might already be familiar with this: to make your module &amp;ldquo;complete&amp;rdquo; and useful in every scenario, you use complicated input variable structure, you create even more complicated local variables with short-hand conditions, you even need to use built-in functions to merge multiple variables as one so that if one variable is empty, you can still get the value from another variable and no exception would be thrown.&lt;/p>
&lt;p>For starters, when you look at the code like this, it&amp;rsquo;s not &amp;ldquo;declarative&amp;rdquo; anymore, because when you read something as complicated as that, you can&amp;rsquo;t really know the description of the infrastructure that you are going to create with that code, you can&amp;rsquo;t know what value is being set to this specific parameter.&lt;/p>
&lt;p>Maybe writing a module for a specific scenario isn&amp;rsquo;t that bad. When you have a slightly different use case, create another module. This might generate duplicated code, so you need to:&lt;/p>
&lt;hr>
&lt;h2 id="5-the-art-of-finding-the-balance-dry-vs-readability">5 The Art of Finding the Balance: DRY V.S. Readability&lt;/h2>
&lt;p>DRY means Don&amp;rsquo;t Repeat Yourself, and this principle is loved by many programmers.&lt;/p>
&lt;p>Yet, you also have to find the right balance between &amp;ldquo;duplicated code&amp;rdquo; and &amp;ldquo;readability.&amp;rdquo; This is also true for any programming language because code is for humans to read.&lt;/p>
&lt;p>When you want to achieve two things in one piece of code, you will need extra input parameters. You will need if-else. You will need to generate various outputs too. Adding too many features into one piece of code will invariably reduce the readability because brains are not so great with if-else and parameters.&lt;/p>
&lt;p>On the other hand, you can choose to have two pieces of code for two slightly different features, with both having straight-forward logic flow and easy to read, but in this way, you probably will have some duplicated code. Using the right technique, for example, extracting the similar part out and creating a small module for it (if it will be commonly used) might be an answer.&lt;/p>
&lt;p>Finding the right balance between duplicated code and readability is an art that requires experience to be made perfect, and only you can decide for yourself. &amp;ldquo;You must have less than 10% duplicated code&amp;rdquo; or &amp;ldquo;reuse modules as much as possible&amp;rdquo; are simply not pragmatic or helpful suggestions.&lt;/p>
&lt;hr>
&lt;h2 id="6-separate-infrastructure-with-configuration">6 Separate Infrastructure with Configuration&lt;/h2>
&lt;h3 id="61-a-story">6.1 A Story&lt;/h3>
&lt;p>Once, I was in a project where we use IaC to create Kubernetes clusters; then, some customization is done on top of it to install required components inside the cluster.&lt;/p>
&lt;p>In that project, Terraform is used, then Terraform Kubernetes provider is also used to install things inside the cluster. So far, so good, because Terraform is idempotent (more on that later) by design.&lt;/p>
&lt;p>The thing is, if a certain resource is already in the cluster, like a ConfigMap, the Kubernetes provider can&amp;rsquo;t &amp;ldquo;upsert&amp;rdquo; it, and it would fail because it already existed. The provider breaks the idempotency.&lt;/p>
&lt;p>This is an example of why you want to separate your IaC part from the configuration management part because not only does it make sense logically, but also it reduces the complexity.&lt;/p>
&lt;p>In the example above, if we used Terraform only to create the cluster and nothing else, then use CI/CD tools to do &lt;code>kubectl apply&lt;/code>, there would be no trouble at all.&lt;/p>
&lt;h3 id="62-whats-infrastructure-as-code-iac">6.2 What&amp;rsquo;s Infrastructure as Code (IaC)&lt;/h3>
&lt;p>Infrastructure as Code (IaC) manages infrastructure in a descriptive model:&lt;/p>
&lt;ul>
&lt;li>It uses code files as the definition rather than interactive tools.&lt;/li>
&lt;li>It tries to achieve 100% automation.&lt;/li>
&lt;li>It doesn&amp;rsquo;t matter if you run your own data center or you use the public cloud.&lt;/li>
&lt;/ul>
&lt;p>You write code to manage your networks, servers (physical servers or virtual machines), connections, connection topology, load balancers, etc.&lt;/p>
&lt;h3 id="63-whats-configuration-management-cm">6.3 What&amp;rsquo;s Configuration Management (CM)&lt;/h3>
&lt;p>Configuration Management (CM), on the other hand, maintains computer systems, software, dependencies, settings, etc., in a desired, consistent state.&lt;/p>
&lt;p>Think physical data center as another example: purchasing servers, putting a newly purchased server onto a rack, installing servers, connecting networking cables to the switches so that it&amp;rsquo;s connected to the existing networks (or think of launching a new virtual machine and assigning network interfaces to it) belongs to the definition of &amp;ldquo;infrastructure.&amp;rdquo; These are infrastructure parts, done by specific teams. In contrast, after the server is launched, configuring the servers to run specific software, for example, installing an HTTP server software and configuring it belongs to &amp;ldquo;configuration management&amp;rdquo;, and it probably can be done by another team which doesn&amp;rsquo;t need to worry about the underlying infrastructure at all.&lt;/p>
&lt;h3 id="64-the-iac-and-cm-separation">6.4 The IaC and CM Separation&lt;/h3>
&lt;p>In the real world, things are not as simple as the &amp;ldquo;black or white&amp;rdquo; example above because we have many different tools and technologies allowing us to do Infrastructure as Code, or configuration management, or both at the same time.&lt;/p>
&lt;p>For example, although Terraform is considered an IaC tool, it can do some configurations and installations on certain servers. And although Ansible is considered a configuration management tool, it can launch virtual machines.&lt;/p>
&lt;p>Finding the right boundary for you, figuring out which part you would like Terraform to manage, and how Terraform interacts with your choice of CM tools is crucial, especially for large projects.&lt;/p>
&lt;p>In an ever-changing world, the entropy in your system is only increasing. In the long run, you will benefit greatly from &amp;ldquo;simplify&amp;rdquo; and &amp;ldquo;do one thing and do it right.&amp;rdquo;&lt;/p>
&lt;hr>
&lt;h2 id="7-make-your-terraform-code-idempotent">7 Make Your Terraform Code Idempotent&lt;/h2>
&lt;p>Idempotent means no matter how many times you run your IaC and, what your starting state is, you will end up with the same end state.&lt;/p>
&lt;p>The same principle applies to configuration management too.&lt;/p>
&lt;p>Why Do We Need Idempotency?&lt;/p>
&lt;p>Idempotency is nice to have because infrastructure and configuration are not getting simpler as time goes on. Even if you just started fresh, you will handle complicated situations in no time. Idempotency simplifies the provisioning of infrastructure and the management of configurations, and it reduces the chances of inconsistent results.&lt;/p>
&lt;p>For example, you need to set up A, then set up B after A is finished. If setting up A failed, you want to re-run your automation so that it can retry setting up B without trying to create A again (if it tries to create A again, it will fail because A already exists).&lt;/p>
&lt;p>How to make it idempotent? Read on.&lt;/p>
&lt;hr>
&lt;h2 id="8-make-your-terraform-code-declarative">8 Make Your Terraform Code Declarative&lt;/h2>
&lt;p>To achieve idempotency, a declarative style of code is preferred in most cases.&lt;/p>
&lt;p>Declarative means defining the final state you want to have, rather than what command to execute in the code.&lt;/p>
&lt;p>For example, you want to install an HTTP webserver. The task should be described as &amp;ldquo;ensure an HTTP server is installed&amp;rdquo; (i.e., if the HTTP server isn&amp;rsquo;t installed, install it; if already installed, do nothing), instead of &amp;ldquo;run this apt command to install the server.&amp;rdquo;&lt;/p>
&lt;p>When you look at your Infrastructure as Code, it should be like reading a document, a description of what you will have if you run this code, no matter how many times you run it.&lt;/p>
&lt;p>When writing your infrastructure code or even creating a Terraform provider, you need to have &amp;ldquo;side effects&amp;rdquo; in mind. If this part runs a shell command or script, what happens if I run &amp;ldquo;terraform apply&amp;rdquo; again?&lt;/p>
&lt;hr>
&lt;h2 id="9-forget-about-cloud-agnostic--vendor-lock-in">9 Forget about Cloud Agnostic / Vendor Lock-in&lt;/h2>
&lt;p>This might be controversial, but I&amp;rsquo;d like to make it clear: Terraform isn&amp;rsquo;t &amp;ldquo;Cloud-Agnostic&amp;rdquo;, and vendor lock-in doesn&amp;rsquo;t matter (at least it not as much as you might think.)&lt;/p>
&lt;p>In many cases, people are fighting hard to avoid vendor lock-in. Because we want to have a &amp;ldquo;backup plan&amp;rdquo; if things don&amp;rsquo;t work out nicely with the current vendor. We want to have the option of moving to another vendor with as little trouble as possible.&lt;/p>
&lt;p>It&amp;rsquo;s not the case in the real world.&lt;/p>
&lt;p>When you buy servers in bulk, you probably sign multi-year contracts with the vendor for a better price. When you are using the cloud, you rarely decide to move to another cloud. Having a multi-cloud setup, maybe yes, but migrating from one cloud to another isn&amp;rsquo;t common, although situations like that do exist.&lt;/p>
&lt;p>Even if you want to use Terraform to manage your AWS resource because you might want to move to GCP or Azure in the future, and you know Terraform works with GCP and Azure, in reality, you can&amp;rsquo;t re-use your code. It goes without saying that if you want to switch from one cloud to another, you need to rewrite all your Terraform code: different cloud has different Terraform providers, and their resource name and parameters differ greatly.&lt;/p>
&lt;p>Admit it or not, you are vendor locked-in, one way or another.&lt;/p>
&lt;p>Once you are clear of this, it&amp;rsquo;s, in fact, easier for you to choose the right tool for the job: because you are not afraid of vendor lock-in anymore, and you don&amp;rsquo;t put it as the top priority one when making comparisons. Instead, you start to see the features, advantages, and disadvantages of each choice. For example, if you are already using Terraform with AWS, but for this specific piece of infrastructure, it might be even easier to use AWS CDK or some other tool (for example, &lt;code>eksctl&lt;/code> to create a K8s cluster), why not?&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>With a not-so-flat learning curve, Terraform can be intimidating, but once mastered, it provides you enough flexibility to manage your infrastructure. There are pitfalls and issues if you don&amp;rsquo;t use it properly, but with some care and continuous refactoring, it can be manageable, and the code can be kept clean and easy to read. I hope these &amp;ldquo;best practices&amp;rdquo; help!&lt;/p></description></item><item><title>Blog: Dagger (the CI/CD Tool, not the Knife) In-Depth: Everything You Need to Know (as of Apr 2022)</title><link>https://www.devstream.io/blog/dagger-the-ci/cd-tool-not-the-knife-in-depth-everything-you-need-to-know-as-of-apr-2022/</link><pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.devstream.io/blog/dagger-the-ci/cd-tool-not-the-knife-in-depth-everything-you-need-to-know-as-of-apr-2022/</guid><description>
&lt;img src="https://www.devstream.io/blog/dagger-the-ci/cd-tool-not-the-knife-in-depth-everything-you-need-to-know-as-of-apr-2022/featured-background_hu8915b1886940075ec02a53536d606ede_167855_640x0_resize_q75_catmullrom.jpg" width="640" height="355"/>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1210px">
&lt;img class="card-img-top" src="https://www.devstream.io/blog/dagger-the-ci/cd-tool-not-the-knife-in-depth-everything-you-need-to-know-as-of-apr-2022/featured-background_hu8915b1886940075ec02a53536d606ede_167855_1200x800_fill_q75_catmullrom_smart1.jpg" width="1200" height="800">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Chaotianmen, Chongqing, China
&lt;small class="text-muted">&lt;br/>Photo: Tiexin Guo / CC-BY-CA&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="1-what-is-dagger">1 What is Dagger?&lt;/h2>
&lt;p>TL;DR: Dagger runs your CI/CD pipelines locally in a Docker container, and can run the container in any CI environment (as long as that CI can run a container, of course.)&lt;/p>
&lt;p>Do you want the long answer to this million-dollar question? It&amp;rsquo;s hard to answer, honestly. News is calling it a &amp;ldquo;DevOps platform&amp;rdquo;; the VC that funded Dagger even called it a &amp;ldquo;DevOps operating system.&amp;rdquo;&lt;/p>
&lt;p>But, in fact, Dagger is neither of those things.&lt;/p>
&lt;p>Before we can answer what Dagger is, let&amp;rsquo;s have a look at it in-depth:&lt;/p>
&lt;h2 id="2-quirks-and-features">2 Quirks and Features&lt;/h2>
&lt;h3 id="21-buildkit">2.1 BuildKit&lt;/h3>
&lt;p>In Dagger, the configuration is executed in BuildKit, which is the execution engine at the heart of Docker.&lt;/p>
&lt;p>BuildKit was developed as part of the Moby project, the latter of which is an open framework to assemble specialized container systems without reinventing the wheel by Docker. Basically, it&amp;rsquo;s a toolkit for converting source code to build artifacts in an efficient, expressive, and repeatable manner. It was announced in 2017 and began shipping with Docker Engine in 2018’s version 18.09.&lt;/p>
&lt;h3 id="22-cue">2.2 CUE&lt;/h3>
&lt;p>Unlike most popular CI systems out there, you don&amp;rsquo;t write YAML in Dagger; you write CUE.&lt;/p>
&lt;p>I feel you because I didn&amp;rsquo;t know what&amp;rsquo;s CUE either. Turned out, CUE is an open-source data validation language and inference engine with its roots in logic programming.&lt;/p>
&lt;p>It aims to simplify tasks involving defining and using data. It&amp;rsquo;s actually a superset of JSON, so users familiar with JSON should feel comfortable with it already and can get started quickly. It also has got built-in auto-formatting (yay.)&lt;/p>
&lt;p>Although the language is not a general-purpose programming language, it has many applications, such as data validation, data templating, configuration (that&amp;rsquo;s probably why Dagger decided to use it in the first place), querying, code generation, and even scripting.&lt;/p>
&lt;h3 id="23-wait-a-minute">2.3 Wait a Minute&lt;/h3>
&lt;p>Since it&amp;rsquo;s already reusing Docker&amp;rsquo;s parts for configuration execution, why not reuse Docker&amp;rsquo;s other part, Dockerfile, for configuration?&lt;/p>
&lt;p>What&amp;rsquo;s the purpose of using another language just for the configuration?&lt;/p>
&lt;p>Solomon Hykes, the founder of Dagger, actually answered exact this question on their official Discord channel:&lt;/p>
&lt;blockquote>
&lt;p>We needed a modern declarative language with a type system, a package manager, native yaml and json interop, a formal spec, and a standalone community not locked to one tool.&lt;/p>
&lt;p>Also Dockerfiles are specific to build, but Dagger is more general-purpose automation&lt;/p>
&lt;p>There was no way at all Dockerfile could support our requirements (speaking as one of the original authors of the Dockerfile syntax)&lt;/p>
&lt;/blockquote>
&lt;h2 id="3-enough-tech-spec-what-does-dagger-do">3 Enough Tech Spec. What Does Dagger Do?&lt;/h2>
&lt;h3 id="31-what-dagger-isnt">3.1 What Dagger Isn&amp;rsquo;t&lt;/h3>
&lt;p>First, let me tell you what Dagger isn&amp;rsquo;t by quoting the official documentation:&lt;/p>
&lt;blockquote>
&lt;p>Dagger does not replace your CI: it improves it by adding a portable development layer on top of it.&lt;/p>
&lt;/blockquote>
&lt;p>OK, so it&amp;rsquo;s not yet another CI (or CD, for that matter).&lt;/p>
&lt;p>Dagger didn&amp;rsquo;t even try to &lt;em>replace&lt;/em> your existing CI, at all. But rather, it &lt;em>improves&lt;/em> your CI, by adding a wrapper layer.&lt;/p>
&lt;p>I know the term &amp;ldquo;wrapper&amp;rdquo; doesn&amp;rsquo;t sound fancy, so let&amp;rsquo;s call it by its official reference, and that is &amp;ldquo;portable development layer&amp;rdquo;.&lt;/p>
&lt;h3 id="32-so-just-a-wrapper">3.2 So, Just a Wrapper?&lt;/h3>
&lt;p>Disappointed? Don&amp;rsquo;t conclude too quick; follow me. First, let&amp;rsquo;s look at some other DevOps/cloud related examples:&lt;/p>
&lt;ul>
&lt;li>Think of Terraform. You&amp;rsquo;ve got multiple environments to manage. Even with reuseable modules and roles, you still have duplicated code across envs. Then comes Terragrunt, which is a (thin) wrapper that provides extra tools for keeping your configurations simple without repeating yourself.&lt;/li>
&lt;li>Think of AWS CDK. It actually is a wrapper layer on top of CloudFormation, which lets you use your familiar programming languages to define and provision AWS cloud infrastructure, so that you don&amp;rsquo;t have to deal with CloudFormation&amp;rsquo;s non-human-readable configurations. Of course, your code still converts to a format that CloudFormation understands, and your infrastructure is still managed by CloudFormation; AWS CDK doesn&amp;rsquo;t really interact with AWS APIs directly. That&amp;rsquo;s why it&amp;rsquo;s only a wrapper layer on top of CloudFormation.&lt;/li>
&lt;li>Think of CDKTF (CDK for Terraform); it&amp;rsquo;s no different than AWS CDK, perhaps because CDKTF is inspired by AWS CDK and also uses AWS&amp;rsquo;s &lt;code>jsii&lt;/code> library to be polyglot. It&amp;rsquo;s a wrapper layer on top of Terraform that translates your code into Terraform HCL so that you don&amp;rsquo;t have to learn HCL. But in essence, your infrastructure is still managed by Terraform HCL, not your code directly. So, it&amp;rsquo;s yet another wrapper.&lt;/li>
&lt;/ul>
&lt;p>You must have already figured out where I am going with this, and you are right: yes, Dagger is no different. It is a wrapper.&lt;/p>
&lt;p>But, of course, the wrapper has to do something to be useful, right? Then what exactly does Dagger do? What exactly does Dagger wrap? Good Questions.&lt;/p>
&lt;h3 id="33-what-dagger-can-do">3.3 What Dagger Can Do&lt;/h3>
&lt;p>In any CI system, you define some steps and actions in a certain format (YAML, most likely) and run it in your CI system. For example, in Jenkins, maybe you will write some groovy file. In GitHub Actions, you write some YAML with multiple steps.&lt;/p>
&lt;p>Basically, Dagger runs those &amp;ldquo;steps and actions&amp;rdquo; in a Docker container. Then where do you run the Dagger docker container itself? Great question: you can either run it locally (because you can install Docker desktop, right?) or in your existing CI (since most CIs can run a docker container.)&lt;/p>
&lt;p>If you think about it: Dagger doesn&amp;rsquo;t wrap your CI pipelines or systems. It wraps those detailed steps and actions into a Docker container and still runs in your existing CI. It&amp;rsquo;s like writing a big Dockerfile, and when you run the container, it does git clone, source code static scan, test, build, artifact upload, and what have you.&lt;/p>
&lt;h2 id="4-what-dagger-really-is">4 What Dagger Really Is&lt;/h2>
&lt;p>Yes, Dagger is a wrapper, that part is true.&lt;/p>
&lt;p>But, it doesn&amp;rsquo;t wrap CI systems; it wraps your pipeline steps and actions into a container (you have to rewrite those steps and actions in Dagger&amp;rsquo;s syntax, though), and the wrapped result can run in another CI (as long as that CI can run a container.)&lt;/p>
&lt;p>In this sense, Dagger &lt;em>is&lt;/em> yet another CI, except that CI runs in a container and most CI systems happen to be able to run containers.&lt;/p>
&lt;h2 id="5-benefits">5 Benefits&lt;/h2>
&lt;p>I think there are 3 major advantages of using Dagger&lt;/p>
&lt;h3 id="51-local-development">5.1 Local Development&lt;/h3>
&lt;p>Firstly, there is no need to install &lt;em>any&lt;/em> dependencies specific to this application, because Dagger manages all the intermediate steps and transient dependencies inside the Docker container.&lt;/p>
&lt;p>This might not be an advantage if we are talking about CI, but it is an advantage if we are talking about local development.&lt;/p>
&lt;p>Think of Go where you have to install modules or think of Nodejs where you might even need to switch Node versions then do an NPM install. Now you can do all of those inside a container and only get the final result to your local laptop.&lt;/p>
&lt;h3 id="52-on-premise-ci">5.2 &amp;ldquo;On-Premise&amp;rdquo; CI&lt;/h3>
&lt;p>You can run your pipeline locally now since you can easily have the Docker desktop up and running locally.&lt;/p>
&lt;p>I&amp;rsquo;m not sure if this is a solid requirement, though. Maybe it is? Because we all have powerful laptops now; why waste money on some CI systems when you can run them locally?&lt;/p>
&lt;p>The idea of running it anywhere as long as Docker is available is intriguing, though. If you don&amp;rsquo;t want to buy CI as a service, you can run Dagger in your own infrastructure.&lt;/p>
&lt;h3 id="53-migrate-to-another-ci">5.3 Migrate to Another CI&lt;/h3>
&lt;p>Since your &amp;ldquo;steps and actions&amp;rdquo; now are running in a container, you can run it elsewhere, in another CI system.&lt;/p>
&lt;p>Should you need to migrate to another CI, you do not need to rewrite your CI steps anymore. For example, you don&amp;rsquo;t want to use your company&amp;rsquo;s old Jenkins instance anymore, but you are already using Dagger with Jenkins, and now you want to give GitHub Actions a try.&lt;/p>
&lt;p>It&amp;rsquo;s worth noting that in this scenario, there are still two things to do:&lt;/p>
&lt;ul>
&lt;li>If you are using Jenkins now, and want to migrate those Jenkins pipelines into Dagger, you need to do it manually. The cost is the same (if not more) as rewriting your whole pipeline in GitHub Actions&amp;rsquo; syntax.&lt;/li>
&lt;li>You will still need to learn about your new CI system: how a job is triggered, the syntax, etc.&lt;/li>
&lt;/ul>
&lt;p>Here you can see Dagger does provide a solution to avoid CI lock-in (to some extent.) But it is not a game changing solution that could resolve your flexibility concern.&lt;/p>
&lt;p>For a DevOps engineer, a DevOps toolchain that could accommodate different needs and priorities from different teams is more than appealing. That being said, each component is modular and pluggable, and you could free yourself from tedious work like launching, integrating, and managing all these pieces.&lt;/p>
&lt;p>Ideally, you could define your desired DevOps tools in a single human-readable YAML config file, and with one single command, you have your whole DevOps toolchain and SDLC workflow set up or changed.&lt;/p>
&lt;p>If you are intrigued by the simplicity of &amp;ldquo;DevOps toolchain as code&amp;rdquo;, don&amp;rsquo;t hesitate to check out DevStream &lt;a href="https://github.com/devstream-io/devstream">here&lt;/a>.&lt;/p>
&lt;h2 id="6-should-i-use-dagger-now">6 Should I use Dagger Now?&lt;/h2>
&lt;p>Is it promising? Maybe. Should I start using it now? My answer is No. Three reasons:&lt;/p>
&lt;ul>
&lt;li>The Dagger project itself still uses GitHub Actions. Why? Probably because it has limitations and can&amp;rsquo;t do everything you can achieve with GitHub Actions.&lt;/li>
&lt;li>You probably won&amp;rsquo;t change your CI system every 6 months. If you only change it one time in 4 years, why bother adding that wrapper?&lt;/li>
&lt;li>Dagger is only recently announced. It hasn&amp;rsquo;t supported a whole lot of CI systems yet. Maybe the CI you want to switch to doesn&amp;rsquo;t support it yet.&lt;/li>
&lt;/ul>
&lt;p>Like, comment, subscribe. See you in the next article!&lt;/p></description></item><item><title>Blog: v0.3.1 Release Note</title><link>https://www.devstream.io/blog/v0.3.1-release-note/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.devstream.io/blog/v0.3.1-release-note/</guid><description>
&lt;h2 id="download-devstream-v031">Download DevStream v0.3.1&lt;/h2>
&lt;p>Official Releases for Different Platforms:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://devstream.gateway.scarf.sh/releases/v0.3.1/dtm-darwin-arm64">dtm-darwin-arm64&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://devstream.gateway.scarf.sh/releases/v0.3.1/dtm-darwin-amd64">dtm-darwin-amd64&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://devstream.gateway.scarf.sh/releases/v0.3.1/dtm-linux-amd64">dtm-linux-amd64&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>We also support installation by brew: &lt;code>brew install devstream-io/devstream/dtm&lt;/code>. Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ brew install devstream-io/devstream/dtm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Downloading https://github.com/devstream-io/homebrew-devstream/releases/download/dtm-0.3.1/dtm-0.3.1.arm64_monterey.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Downloading from https://objects.githubusercontent.com/github-production-release-asset-2e65be/474804179/268d59c6-9b12-419e-ac75-e77e87428d3b?X-Amz-Algorit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">######################################################################## 100.0%&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Installing dtm from devstream-io/devstream
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Pouring dtm-0.3.1.arm64_monterey.bottle.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>🍺 /opt/homebrew/Cellar/dtm/0.3.1: &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> files, 13.5MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span>&amp;gt; Running &lt;span style="color:#4e9a06">`&lt;/span>brew cleanup dtm&lt;span style="color:#4e9a06">`&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hide these hints with HOMEBREW_NO_ENV_HINTS &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>see &lt;span style="color:#4e9a06">`&lt;/span>man brew&lt;span style="color:#4e9a06">`&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ dtm version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0.3.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Developers&amp;rsquo; note: technically, this version isn&amp;rsquo;t backward compatible with v0.3.0; so it shouldn&amp;rsquo;t be v0.3.1, but rather, v1.0.0. However, we are not ready for making it &amp;ldquo;v1.0.0&amp;rdquo; just yet, so please forgive us for this one-time exception of not following the SEMVER rules.&lt;/em>&lt;/p>
&lt;h2 id="major-changes-since-v030">Major Changes since v0.3.0&lt;/h2>
&lt;p>First things first: we have a new logo now! Check out our &lt;a href="https://github.com/devstream-io/devstream#readme=">README.md&lt;/a>.&lt;/p>
&lt;p>Our website is live now, too. Visit us:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.devstream.io">homepage&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.devstream.io/en/latest/">docs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/devstream">Medium&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dev.to/devstream">dev.to&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="core">Core&lt;/h2>
&lt;ul>
&lt;li>Version improvement. This is a breaking change. Now, dtm will automatically download matching versions of plugins without having to specify the version of each plugin in the config.&lt;/li>
&lt;li>Installation via brew is supported now: brew install devstream-io/devstream/dtm. Thanks to @algobot76.&lt;/li>
&lt;/ul>
&lt;h2 id="develop">Develop&lt;/h2>
&lt;ul>
&lt;li>dtm develop now generates more scaffolding code for you so that you can easily create a new plugin. If you are interested, read &lt;a href="https://www.devstream.io/blog/creating-a-devstream-dtm-plugin-for-anything/">this blog post&lt;/a>.&lt;/li>
&lt;li>We support multi-threaded build now, thanks to @algobot76.&lt;/li>
&lt;li>Makefile is greatly improved so that when you create a new plugin, you don&amp;rsquo;t have to change the Makefile at all. Thanks to @summingyu.&lt;/li>
&lt;li>We can automatically release a new version now.&lt;/li>
&lt;li>A big refactor including directory name, document name, etc. Thanks to @imxw, @summingyu, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="docs">Docs&lt;/h2>
&lt;ul>
&lt;li>A new doc about the &amp;ldquo;output&amp;rdquo; feature is created.&lt;/li>
&lt;li>A new doc about the dtm destroy command is created.&lt;/li>
&lt;li>Our docs are now available on &lt;a href="https://docs.devstream.io/en/latest/">readthedocs.io&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="detailed-changes">Detailed Changes&lt;/h2>
&lt;ul>
&lt;li>Refactor: unify the parameter type naming of various plugins to Options by @summingyu in &lt;a href="https://github.com/devstream-io/devstream/pull/327">https://github.com/devstream-io/devstream/pull/327&lt;/a>&lt;/li>
&lt;li>Docs dtm destroy by @IronCore864 in &lt;a href="https://github.com/devstream-io/devstream/pull/340">https://github.com/devstream-io/devstream/pull/340&lt;/a>&lt;/li>
&lt;li>docs: add output documentation by @IronCore864 in &lt;a href="https://github.com/devstream-io/devstream/pull/341">https://github.com/devstream-io/devstream/pull/341&lt;/a>&lt;/li>
&lt;li>fix(develop template): fix update_go_nameTpl by @warren830 in &lt;a href="https://github.com/devstream-io/devstream/pull/344">https://github.com/devstream-io/devstream/pull/344&lt;/a>&lt;/li>
&lt;li>fix(develop template): fix NAME_plugin_md_dirTpl by @warren830 in &lt;a href="https://github.com/devstream-io/devstream/pull/343">https://github.com/devstream-io/devstream/pull/343&lt;/a>&lt;/li>
&lt;li>refactor(trello): consistent entry logic with other plugins by @daniel-hutao in &lt;a href="https://github.com/devstream-io/devstream/pull/346">https://github.com/devstream-io/devstream/pull/346&lt;/a>&lt;/li>
&lt;li>chore: change params to options for main.go template by @imxw in &lt;a href="https://github.com/devstream-io/devstream/pull/347">https://github.com/devstream-io/devstream/pull/347&lt;/a>&lt;/li>
&lt;li>refactor(argocdapp/devlake/trello/gitlabci/githubactions-nodejs): keep consistent with the &lt;code>plugin template&lt;/code> by @warren830 in &lt;a href="https://github.com/devstream-io/devstream/pull/345">https://github.com/devstream-io/devstream/pull/345&lt;/a>&lt;/li>
&lt;li>Feat: version improvement by @lfbdev in &lt;a href="https://github.com/devstream-io/devstream/pull/337">https://github.com/devstream-io/devstream/pull/337&lt;/a>&lt;/li>
&lt;li>fix: main-builder.yaml -&amp;gt; main-pushed.yml at README.md by @daniel-hutao in &lt;a href="https://github.com/devstream-io/devstream/pull/349">https://github.com/devstream-io/devstream/pull/349&lt;/a>&lt;/li>
&lt;li>feat(develop/create-plugin): adding more common logic in template by @daniel-hutao in &lt;a href="https://github.com/devstream-io/devstream/pull/350">https://github.com/devstream-io/devstream/pull/350&lt;/a>&lt;/li>
&lt;li>ci: e2e-test from &lt;code>actions&lt;/code> to &lt;code>eks&lt;/code> by @daniel-hutao in &lt;a href="https://github.com/devstream-io/devstream/pull/322">https://github.com/devstream-io/devstream/pull/322&lt;/a>&lt;/li>
&lt;li>refactor(cmd): keep all plugins dirname-in-cmd == plugin-name by @daniel-hutao in &lt;a href="https://github.com/devstream-io/devstream/pull/352">https://github.com/devstream-io/devstream/pull/352&lt;/a>&lt;/li>
&lt;li>fix: change main_go_dir to &lt;code>cmd/plugin/&lt;/code> by @imxw in &lt;a href="https://github.com/devstream-io/devstream/pull/354">https://github.com/devstream-io/devstream/pull/354&lt;/a>&lt;/li>
&lt;li>chore: update .gitignore to ignore .vscode directory by @algobot76 in &lt;a href="https://github.com/devstream-io/devstream/pull/353">https://github.com/devstream-io/devstream/pull/353&lt;/a>&lt;/li>
&lt;li>Refactor some Plugins to Be Consistent with The Plugin Template by @summingyu in &lt;a href="https://github.com/devstream-io/devstream/pull/355">https://github.com/devstream-io/devstream/pull/355&lt;/a>&lt;/li>
&lt;li>docs: update readme with new logo by @IronCore864 in &lt;a href="https://github.com/devstream-io/devstream/pull/356">https://github.com/devstream-io/devstream/pull/356&lt;/a>&lt;/li>
&lt;li>chore: revert the workflow name with &amp;lsquo;main builder&amp;rsquo; by @daniel-hutao in &lt;a href="https://github.com/devstream-io/devstream/pull/357">https://github.com/devstream-io/devstream/pull/357&lt;/a>&lt;/li>
&lt;li>Refactor: Automatically build the makefile from the cmd directory by @summingyu in &lt;a href="https://github.com/devstream-io/devstream/pull/358">https://github.com/devstream-io/devstream/pull/358&lt;/a>&lt;/li>
&lt;li>feat: trigger GitHub actions after some specific comments by @daniel-hutao in &lt;a href="https://github.com/devstream-io/devstream/pull/362">https://github.com/devstream-io/devstream/pull/362&lt;/a>&lt;/li>
&lt;li>refactor(plugin): adapt for the plugin generation tool by @imxw in &lt;a href="https://github.com/devstream-io/devstream/pull/359">https://github.com/devstream-io/devstream/pull/359&lt;/a>&lt;/li>
&lt;li>Refactor: be consistent with the plugin template by @summingyu in &lt;a href="https://github.com/devstream-io/devstream/pull/363">https://github.com/devstream-io/devstream/pull/363&lt;/a>&lt;/li>
&lt;li>ci: improve makefile for multi-threaded build and readme by @IronCore864 in &lt;a href="https://github.com/devstream-io/devstream/pull/366">https://github.com/devstream-io/devstream/pull/366&lt;/a>&lt;/li>
&lt;li>Automated Release script and workflow by @lfbdev in &lt;a href="https://github.com/devstream-io/devstream/pull/360">https://github.com/devstream-io/devstream/pull/360&lt;/a>&lt;/li>
&lt;li>fix: GitHub actions error - API rate limit exceeded by @daniel-hutao in &lt;a href="https://github.com/devstream-io/devstream/pull/368">https://github.com/devstream-io/devstream/pull/368&lt;/a>&lt;/li>
&lt;li>feat: remove plugin version from config by @IronCore864 in &lt;a href="https://github.com/devstream-io/devstream/pull/369">https://github.com/devstream-io/devstream/pull/369&lt;/a>&lt;/li>
&lt;li>fix: install goimports at &lt;code>main builder&lt;/code> &amp;amp; &lt;code>automated-release&lt;/code> workflow by @daniel-hutao in &lt;a href="https://github.com/devstream-io/devstream/pull/370">https://github.com/devstream-io/devstream/pull/370&lt;/a>&lt;/li>
&lt;li>chore: remove the suffix &lt;code>_plugin&lt;/code> with all plugin docs under &lt;code>docs/plugins&lt;/code> by @daniel-hutao in &lt;a href="https://github.com/devstream-io/devstream/pull/371">https://github.com/devstream-io/devstream/pull/371&lt;/a>&lt;/li>
&lt;li>fix: install goimports at e2t-test workflow job by @daniel-hutao in &lt;a href="https://github.com/devstream-io/devstream/pull/373">https://github.com/devstream-io/devstream/pull/373&lt;/a>&lt;/li>
&lt;li>feat: prepare for v0.3.1 release by @IronCore864 in &lt;a href="https://github.com/devstream-io/devstream/pull/375">https://github.com/devstream-io/devstream/pull/375&lt;/a>&lt;/li>
&lt;li>fix: fix the return error by @lfbdev in &lt;a href="https://github.com/devstream-io/devstream/pull/376">https://github.com/devstream-io/devstream/pull/376&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="new-contributors">New Contributors&lt;/h2>
&lt;ul>
&lt;li>@algobot76 made their first contribution in &lt;a href="https://github.com/devstream-io/devstream/pull/353">https://github.com/devstream-io/devstream/pull/353&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Full Changelog&lt;/strong>: &lt;a href="https://github.com/devstream-io/devstream/compare/v0.3.0...v0.3.1">https://github.com/devstream-io/devstream/compare/v0.3.0...v0.3.1&lt;/a>&lt;/p></description></item><item><title>Blog: Creating a DevStream (dtm) Plugin for Anything</title><link>https://www.devstream.io/blog/creating-a-devstream-dtm-plugin-for-anything/</link><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.devstream.io/blog/creating-a-devstream-dtm-plugin-for-anything/</guid><description>
&lt;img src="https://www.devstream.io/blog/creating-a-devstream-dtm-plugin-for-anything/featured-background_hubced0a870f76eab482d622a0dd2f964e_408122_640x0_resize_q75_catmullrom.jpg" width="640" height="427"/>
&lt;p>Yes, the title of this post isn&amp;rsquo;t bluffing: you can actually create a plugin for just about anything that takes your fancy.&lt;/p>
&lt;blockquote>
&lt;p>In my previous article, I walked you guys through DevStream&amp;rsquo;s codebase.&lt;/p>
&lt;p>If you haven&amp;rsquo;t read it yet, here&amp;rsquo;s a quick link for you:&lt;/p>
&lt;p>&lt;a href="../hello-world">Hello, world!&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>In this blog, we will walk you through the steps of creating a DevStream plugin from scratch with an example.&lt;/p>
&lt;hr>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1210px">
&lt;img class="card-img-top" src="https://www.devstream.io/blog/creating-a-devstream-dtm-plugin-for-anything/featured-background_hubced0a870f76eab482d622a0dd2f964e_408122_1200x800_fill_q75_catmullrom_smart1.jpg" width="1200" height="800">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
A cat outside a lake side Starbucks, Chengdu, China.
&lt;small class="text-muted">&lt;br/>Photo: Tiexin Guo / CC-BY-CA&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;blockquote>
&lt;p>English version: &lt;a href="../creating-a-devstream-dtm-plugin-for-anything/">《Creating a DevStream (dtm) Plugin for Anything》&lt;/a>Author: @Tiexin Guo(郭铁心)&lt;/p>
&lt;p>中文版：&lt;a href="../../zh/blog/creating-a-devstream-dtm-plugin-for-anything/">《给 DevStream (dtm) 开发一个插件，整合一切你想要的功能》&lt;/a>作者：@胡涛(Daniel Hu)&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="what-is-devstream">What is DevStream&lt;/h2>
&lt;p>DevStream is an amazing tool that lets you install, update, manage, and integrate your DevOps tools quickly and flexibly.&lt;/p>
&lt;p>Not to brag, but with DevStream, you can have your own DevOps toolchain that is specifically tailored to your need up and running in 5 minutes.&lt;/p>
&lt;p>Don&amp;rsquo;t believe it? Check out our &lt;a href="https://docs.devstream.io/en/latest/">docs&lt;/a> and follow the quickstart guide!&lt;/p>
&lt;h2 id="existing-plugins">Existing Plugins&lt;/h2>
&lt;p>At the moment of publishing this article, we already support the following tools:&lt;/p>
&lt;ul>
&lt;li>Trello (including integration with GitHub)&lt;/li>
&lt;li>Jira (integration with GitHub)&lt;/li>
&lt;li>GitHub Repository bootstrapping (for Go)&lt;/li>
&lt;li>GitHub Actions (for Go, Python, and Nodejs)&lt;/li>
&lt;li>GitLab CI (for Go)&lt;/li>
&lt;li>Jenkins (installation)&lt;/li>
&lt;li>ArgoCD&lt;/li>
&lt;li>ArgoCD Application (the deployment of your apps)&lt;/li>
&lt;li>Prometheus + Grafana&lt;/li>
&lt;li>DevLake&lt;/li>
&lt;li>OpenLDAP&lt;/li>
&lt;/ul>
&lt;p>We aim to have 50 plugins at the end of 2022!&lt;/p>
&lt;p>Check out our &lt;a href="https://github.com/devstream-io/devstream">README&lt;/a> for the latest status.&lt;/p>
&lt;h2 id="why-would-i-want-to-create-a-devstream-plugin">Why Would I Want to Create a DevStream Plugin&lt;/h2>
&lt;p>Wait. YOU ALREADY HAVE TONS OF PLUGINS! Why on earth would I want to create yet another one?&lt;/p>
&lt;p>I agree with you.&lt;/p>
&lt;p>Can I get a show of hands, who here has made a DevStream plugin before?&lt;/p>
&lt;p>Very few, if any, I guess.&lt;/p>
&lt;p>However (I know it&amp;rsquo;s just a fancy &amp;ldquo;but&amp;rdquo;), there are, in fact, things that you want to build a plugin for:&lt;/p>
&lt;ul>
&lt;li>Maybe you are building a nice and shiny DevOps tool, and you want to be able to set it up quickly without any hassle. You would have to write some automation scripts for it anyway, right? DevStream got you covered.&lt;/li>
&lt;li>Maybe you even need to integrate your tool with other tools to get the most out of it and you really don&amp;rsquo;t want to reinvent a lot of wheels just to manage those boring integrations. Again, DevStream got you covered.&lt;/li>
&lt;li>Maybe you have both internal tools and open-source tools whose installation and integration need to be automated. The open-source tools are fine, but how to manage those internal ones and integrate them? DevStream got you covered.&lt;/li>
&lt;/ul>
&lt;p>Or, maybe you just want to learn Go&amp;rsquo;s plugin, become a contributor, join our community and earn your certification (maybe a small present, too, who knows.) No problem.&lt;/p>
&lt;p>No matter what your intention is and what thing you want to achieve, DevStream got you covered.&lt;/p>
&lt;p>So hang tight, let&amp;rsquo;s get started.&lt;/p>
&lt;h2 id="design-a-local-file-plugin">Design: A &amp;ldquo;Local File&amp;rdquo; Plugin&lt;/h2>
&lt;p>In this example, let&amp;rsquo;s build something dum but simple, just to show you the process of creating a plugin.&lt;/p>
&lt;p>We are creating a &amp;ldquo;local file&amp;rdquo; plugin. You specify the name and the content, and the plugin will create a local file for you. Let&amp;rsquo;s decide how we are going to use this plugin:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">tools&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">my-file&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">plugin&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">localfile&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">options&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">filename&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">foo.txt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">content&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hello, world&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Basically:&lt;/p>
&lt;ul>
&lt;li>the name of the plugin: &lt;code>localfile&lt;/code>&lt;/li>
&lt;li>options of the plugin:
&lt;ul>
&lt;li>filename&lt;/li>
&lt;li>content&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The plugin will create a file with desired content according to this piece of config.&lt;/p>
&lt;h2 id="scaffolding-automagically">Scaffolding Automagically&lt;/h2>
&lt;p>First, let&amp;rsquo;s clone the DevStream repo and generate some scaffolding code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone git@github.com:devstream-io/devstream.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> stream
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># builds dtm locally to make sure it&amp;#39;s using the same dependencies as your new plugin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make build-core
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./dtm develop create-plugin --name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>localfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There will be some useful output to guide you through the whole process.&lt;/p>
&lt;p>Now, if we do a &lt;code>git status&lt;/code>, we can see some new stuff are already created automagically:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>On branch main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Your branch is up to date with &lt;span style="color:#4e9a06">&amp;#39;origin/main&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Untracked files:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>use &lt;span style="color:#4e9a06">&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to include in what will be committed&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmd/plugin/localfile/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> docs/plugins/localfile.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> internal/pkg/plugin/localfile/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s have a quick recap of the directory structure:&lt;/p>
&lt;h3 id="cmd">cmd/&lt;/h3>
&lt;p>&lt;code>cmd/plugin/localfile/main.go&lt;/code> is the main entrance of your plugin. But here you don&amp;rsquo;t need to do anything; nothing.&lt;/p>
&lt;p>&lt;code>dtm&lt;/code> has already generated the code for you, including the interfaces that you must implement.&lt;/p>
&lt;h3 id="docs">docs/&lt;/h3>
&lt;p>&lt;code>docs/plugins/localfile.md&lt;/code> is the automatically generated documentation.&lt;/p>
&lt;p>Yep, I know &lt;code>dtm&lt;/code> is automagic, but it can&amp;rsquo;t read your mind. I&amp;rsquo;m afraid that you will have to write your own doc.&lt;/p>
&lt;p>But hey, at least here you get a reminder that you need to create a doc :)&lt;/p>
&lt;h3 id="internalpkg">internal/pkg/&lt;/h3>
&lt;p>&lt;code>internal/pkg/plugin/localfile&lt;/code> has your plugin&amp;rsquo;s main logic.&lt;/p>
&lt;p>Here, we need to:&lt;/p>
&lt;ul>
&lt;li>define your input parameters (options);&lt;/li>
&lt;li>implement the validation of the input parameters;&lt;/li>
&lt;li>implement four mandatory interfaces.&lt;/li>
&lt;/ul>
&lt;h2 id="core-concepts">Core Concepts&lt;/h2>
&lt;h3 id="configstateresource">Config/State/Resource&lt;/h3>
&lt;p>Before explaining interfaces and implementing them, let&amp;rsquo;s have a look at how DevStream actually works:&lt;/p>
&lt;ul>
&lt;li>&lt;em>Config&lt;/em> is a list of tools, each of which has a name, plugin, options, etc.&lt;/li>
&lt;li>&lt;em>State&lt;/em> is a map containing each tool&amp;rsquo;s name, plugin, options, etc. It&amp;rsquo;s used to store the result of &lt;code>dtm&lt;/code>&amp;rsquo;s last action.&lt;/li>
&lt;li>&lt;em>Resource&lt;/em> is the tool that the plugin created. The &lt;code>Read&lt;/code> interface returns a description of that resource, which should be the same as the &lt;em>State&lt;/em> if nothing has been changed after &lt;code>dtm&lt;/code>&amp;rsquo;s last action.&lt;/li>
&lt;/ul>
&lt;p>DevStream decides what to do based on your &lt;em>Config&lt;/em>, the &lt;em>State&lt;/em>, and the &lt;em>Resource&lt;/em>&amp;rsquo;s status. See the flowchart below:&lt;/p>
&lt;p>&lt;img src="https://www.devstream.io/img/config_state_resource.png" alt="">&lt;/p>
&lt;h3 id="interfaces">Interfaces&lt;/h3>
&lt;p>A quick recap: each DevStream plugin must satisfy the following four interfaces:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Create&lt;/code>&lt;/li>
&lt;li>&lt;code>Read&lt;/code>&lt;/li>
&lt;li>&lt;code>Update&lt;/code>&lt;/li>
&lt;li>&lt;code>Delete&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Return values:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Create&lt;/code> and &lt;code>Update&lt;/code> return two values &lt;code>(map[string]interface{}, error)&lt;/code>. The first return value is considered as the &lt;em>State&lt;/em>, which will be stored in DevStream&amp;rsquo;s state file.&lt;/li>
&lt;li>&lt;code>Read&lt;/code>&amp;rsquo;s first return value is a description of the &lt;em>Resource&lt;/em>, which should be the same as the &lt;em>State&lt;/em> if nothing has changed.&lt;/li>
&lt;li>&lt;code>Delete&lt;/code> returns &lt;code>(true, nil)&lt;/code> if there is no error; otherwise it returns &lt;code>(false, error)&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="coding">Coding&lt;/h2>
&lt;h3 id="input-optionsvalidation">Input Options/Validation&lt;/h3>
&lt;p>Now let&amp;rsquo;s open &lt;code>internal/pkg/plugin/localfile/options.go&lt;/code> and add options according to our design in the previous section.&lt;/p>
&lt;p>The &lt;code>internal/pkg/plugin/localfile/options.go&lt;/code> should look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">localfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// Options is the struct for configurations of the localfile plugin.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Options&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Filename&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Content&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s also implement the validation function of the input options.&lt;/p>
&lt;p>Open &lt;code>internal/pkg/plugin/localfile/validate.go&lt;/code> and change the logic to verify the options. It should look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">localfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// validate validates the options provided by the core.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">validate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">options&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Options&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">res&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Filename&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">res&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">res&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;filename does not exist&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">res&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="create">Create()&lt;/h3>
&lt;p>We want to create the file based on the input options. So, let&amp;rsquo;s do just that in the file &lt;code>internal/pkg/plugin/localfile/create.go&lt;/code>.&lt;/p>
&lt;p>OK, talk is cheap, show me the code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">localfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;github.com/mitchellh/mapstructure&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;github.com/devstream-io/devstream/pkg/util/log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">options&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{})&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">opts&lt;/span> &lt;span style="color:#000">Options&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">mapstructure&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Decode&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">errs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">validate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">errs&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">errs&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Options error: %s.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;opts are illegal&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">writefile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Filename&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Content&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">status&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;filename&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Filename&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;content&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Content&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">status&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you compare the code above to the code generated by &lt;code>dtm develop&lt;/code>, you will see that we basically did nothing here. We only filled some blanks which are marked by &lt;code>dtm&lt;/code>&amp;rsquo;s comment. The same is true for all the other interfaces.&lt;/p>
&lt;p>&lt;em>A small tip: here, we can put the function &lt;code>writefile&lt;/code> in &lt;code>internal/pkg/plugin/localfile/localfile.go&lt;/code>, so that the code is better organized.&lt;/em>&lt;/p>
&lt;p>The &lt;code>localfile.go&lt;/code> will look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">localfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">writefile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">filename&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">content&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">filename&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Close&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WriteString&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">content&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="read">Read()&lt;/h3>
&lt;p>Let&amp;rsquo;s also implement the &lt;code>Read&lt;/code> interface.&lt;/p>
&lt;p>The logic is simple: we want to try to see if the file exists or not, and if yes, what&amp;rsquo;s the filename and content.&lt;/p>
&lt;p>&lt;code>internal/pkg/plugin/localfile/read.go&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">localfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;github.com/mitchellh/mapstructure&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;github.com/devstream-io/devstream/pkg/util/log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">options&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{})&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">opts&lt;/span> &lt;span style="color:#000">Options&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">mapstructure&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Decode&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">errs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">validate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">errs&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">errs&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Options error: %s.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;opts are illegal&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">content&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReadFile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Filename&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">strings&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contains&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;no such file or directory&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">status&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{}{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;filename&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Filename&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;content&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">string&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">content&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">status&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>On the return value:&lt;/p>
&lt;ul>
&lt;li>If the file doesn&amp;rsquo;t exist, return nil, no error, because it means the resource hasn&amp;rsquo;t been created yet (or deleted by somebody)&lt;/li>
&lt;li>If the file exists, return the &amp;ldquo;status&amp;rdquo; of it and no error.&lt;/li>
&lt;li>Otherwise, return nil and the error.&lt;/li>
&lt;/ul>
&lt;h3 id="update">Update()&lt;/h3>
&lt;p>&lt;code>Update&lt;/code> will be triggered if &lt;code>Read&lt;/code> returns a different result than what&amp;rsquo;s recorded in the &lt;em>State&lt;/em>.&lt;/p>
&lt;p>For the implementation, since we are updating a file, it&amp;rsquo;s the same as &lt;code>Create&lt;/code>, so we can actually reuse it here without duplicated code:&lt;/p>
&lt;p>&lt;code>internal/pkg/plugin/localfile/update.go&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">localfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Update&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">options&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{})&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Create&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="delete">Delete()&lt;/h3>
&lt;p>Last but not least, let&amp;rsquo;s implement the &lt;code>Delete&lt;/code> interface.&lt;/p>
&lt;p>&lt;code>internal/pkg/plugin/localfile/delete.go&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">localfile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;github.com/mitchellh/mapstructure&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;github.com/devstream-io/devstream/pkg/util/log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Delete&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">options&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{})&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">opts&lt;/span> &lt;span style="color:#000">Options&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">mapstructure&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Decode&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">errs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">validate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">errs&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">errs&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Options error: %s.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;opts are illegal&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Filename&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Just delete the file; nothing to look at here.&lt;/p>
&lt;h2 id="build">Build&lt;/h2>
&lt;p>Now that we finished coding, let&amp;rsquo;s build our new plugin. Our Makefile now supports building a specific plugin only:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>make build-plugin.localfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="test">Test&lt;/h2>
&lt;p>First, let&amp;rsquo;s create a config file &lt;code>config-localfile-test.yaml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">tools&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">my-file&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">plugin&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">localfile&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">options&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">filename&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">foo.txt&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">content&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hello, world&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, let&amp;rsquo;s &lt;code>apply&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ./dtm -y apply -f config-localfile-test.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:25:17 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Apply started.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:25:17 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Using dir &amp;lt;.devstream&amp;gt; to store plugins.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:25:17 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Tool my-file &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> found in config but doesn&lt;span style="color:#a40000">&amp;#39;&lt;/span>t exist in the state, will be created.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:25:17 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Start executing the plan.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:25:17 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Changes count: 1.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:25:17 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> -------------------- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> Processing progress: 1/1. &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:25:17 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Processing: my-file &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> -&amp;gt; Create ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:25:17 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Plugin my-file&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> Create &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:25:17 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> -------------------- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> Processing &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>. &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:25:17 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> All plugins applied successfully.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:25:17 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Apply finished.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As we can see, the plugin has created our file successfully. To verify, you can open the &amp;ldquo;foo.txt&amp;rdquo; file to have a look.&lt;/p>
&lt;p>If we &lt;code>apply&lt;/code> again, nothing should happen, since the file is already created with the desired content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ./dtm -y apply -f config-localfile-test.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:30:43 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Apply started.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:30:43 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Using dir &amp;lt;.devstream&amp;gt; to store plugins.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:30:45 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> No changes &lt;span style="color:#204a87;font-weight:bold">done&lt;/span> since last apply. There is nothing to &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:30:45 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Apply finished.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But, what if somebody changed the content of &amp;ldquo;foo.txt&amp;rdquo;? Let&amp;rsquo;s experiment:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;changed&amp;#34;&lt;/span> &amp;gt; foo.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./dtm -y apply -f config-localfile-test.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:26:40 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Apply started.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:26:40 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Using dir &amp;lt;.devstream&amp;gt; to store plugins.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:26:40 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Tool my-file &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> drifted from the state, will be updated.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:26:40 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Start executing the plan.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:26:40 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Changes count: 1.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:26:40 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> -------------------- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> Processing progress: 1/1. &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:26:40 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Processing: my-file &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> -&amp;gt; Update ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:26:40 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Plugin my-file&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> Update &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:26:40 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> -------------------- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> Processing &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>. &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:26:40 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> All plugins applied successfully.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:26:40 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Apply finished.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can see that the file has drifted from the state, so it will be updated. After the operation, the file&amp;rsquo;s content is changed back to what we defined in our config.&lt;/p>
&lt;p>Heck, let&amp;rsquo;s even try deleting this file and see what happens:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ rm foo.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./dtm -y apply -f config-localfile-test.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:27:33 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Apply started.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:27:33 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Using dir &amp;lt;.devstream&amp;gt; to store plugins.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:27:33 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Tool my-file &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> state found but it seems the tool isn&lt;span style="color:#a40000">&amp;#39;&lt;/span>t created, will be created.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:27:33 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Start executing the plan.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:27:33 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Changes count: 1.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:27:33 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> -------------------- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> Processing progress: 1/1. &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:27:33 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Processing: my-file &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> -&amp;gt; Create ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:27:33 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Plugin my-file&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> Create &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:27:33 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> -------------------- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> Processing &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>. &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:27:33 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> All plugins applied successfully.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:27:33 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Apply finished.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Apparently, DevStream thought the file should exist according to the state, but it doesn&amp;rsquo;t, so it is created again.&lt;/p>
&lt;p>Last, let&amp;rsquo;s try to &lt;code>delete&lt;/code> this file with &lt;code>dtm&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ./dtm -y delete -f config-localfile-test.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Delete started.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Using dir &amp;lt;.devstream&amp;gt; to store plugins.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Tool my-file &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> will be deleted.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Start executing the plan.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Changes count: 1.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> -------------------- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> Processing progress: 1/1. &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Processing: my-file &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> -&amp;gt; Delete ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Prepare to delete &lt;span style="color:#4e9a06">&amp;#39;my-file_localfile&amp;#39;&lt;/span> from States.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Plugin my-file &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>localfile&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> delete &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ℹ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>INFO&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> -------------------- &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> Processing &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>. &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> All plugins deleted successfully.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-03-29 11:32:24 ✔ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>SUCCESS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Delete finished.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hooray!&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>I&amp;rsquo;m sorry that I put the &amp;ldquo;TL;DR&amp;rdquo; at the end; it&amp;rsquo;s only because I want you to have a global feeling of DevStream. But for advanced developers, here&amp;rsquo;s a &amp;ldquo;TL;DR&amp;rdquo; (or use it as a checklist) for you:&lt;/p>
&lt;ul>
&lt;li>Run &lt;code>dtm develop create-plugin --name=your-plugin&lt;/code>.&lt;/li>
&lt;li>Do a &lt;code>git status&lt;/code>, then:
&lt;ul>
&lt;li>find the generated files&lt;/li>
&lt;li>edit/code at the places where there is already a comment mark&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pay special attention to the return value of the interfaces. Figure out the relationship between &lt;em>State&lt;/em> and &lt;em>Resource&lt;/em>. What the interfaces return decides how this plugin will behave.&lt;/li>
&lt;li>Last but not least, update the documentation.&lt;/li>
&lt;/ul>
&lt;p>If you enjoy reading this post, please like, comment, and subscribe! I will see you next time.&lt;/p></description></item><item><title>Blog: Hello, World</title><link>https://www.devstream.io/blog/hello-world/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.devstream.io/blog/hello-world/</guid><description>
&lt;img src="https://www.devstream.io/blog/hello-world/featured-background_hu34961e30f9257864937cf0fe28917ce5_796839_640x0_resize_q75_catmullrom.jpg" width="640" height="479"/>
&lt;p>Hello, and welcome to the DevStream blog!&lt;/p>
&lt;p>In this very first &amp;ldquo;hello world&amp;rdquo; post, I will:&lt;/p>
&lt;ul>
&lt;li>give you a high-level picture of how DevStream functions;&lt;/li>
&lt;li>walk you through our codebase;&lt;/li>
&lt;li>explain briefly how to create your own plugin.&lt;/li>
&lt;/ul>
&lt;p>If you haven&amp;rsquo;t heard of DevStream yet, please have a quick glance over our &lt;a href="https://github.com/devstream-io/devstream">README&lt;/a>.&lt;/p>
&lt;p>Without further adieu, let&amp;rsquo;s get started.&lt;/p>
&lt;hr>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1210px">
&lt;img class="card-img-top" src="https://www.devstream.io/blog/hello-world/featured-background_hu34961e30f9257864937cf0fe28917ce5_796839_1200x800_fill_q75_catmullrom_smart1.jpg" width="1200" height="800">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Dong'an Lake, Chengdu, China.
&lt;small class="text-muted">&lt;br/>Photo: Tiexin Guo / CC-BY-CA&lt;/small>&lt;/p>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;blockquote>
&lt;p>English version: &lt;a href="../hello-world">《Hello, World》&lt;/a>Author: @Tiexin Guo(郭铁心)&lt;/p>
&lt;p>中文版：&lt;a href="../../zh/blog/hello-world/">《你好，世界》&lt;/a>作者：@胡涛(Daniel Hu)&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>Too bad, there isn&amp;rsquo;t one. But don&amp;rsquo;t close the tab right away; let me tell you a story.&lt;/p>
&lt;p>Most of the time, I&amp;rsquo;m a &amp;ldquo;normal&amp;rdquo; end-user. And by &amp;ldquo;normal&amp;rdquo;, I mean I don&amp;rsquo;t bother myself with creating GitHub issues and pull requests and follow the updates for days (if not weeks). I love and use open-source projects, but that&amp;rsquo;s about it. Perhaps when I&amp;rsquo;m in an extremely good (or bad) mood, I will open up a discussion to give some feedback (or WTFs) and ramble about it. I don&amp;rsquo;t really contribute on a daily basis, though. Don&amp;rsquo;t get me wrong: I&amp;rsquo;d love it if I had more time; but I work a 9-to-5 job to live, just like most of the readers do.&lt;/p>
&lt;p>If you are like me, should you read this post anyway?&lt;/p>
&lt;p>Well, yes. Because although this article is about DevStream, it isn&amp;rsquo;t. We will cover quite some topics that are non-specific to DevStream. We will discuss generic topics about &lt;a href="https://en.wikipedia.org/wiki/42_(number)#The_Hitchhiker's_Guide_to_the_Galaxy">life, the universe, and everything&lt;/a>. Hang tight. Here we go.&lt;/p>
&lt;hr>
&lt;h2 id="criticism-wanted">Criticism Wanted&lt;/h2>
&lt;p>&lt;a href="https://www.producthunt.com/posts/devstream-1">We released early (Mar 2nd, 2022.)&lt;/a> Maybe a little bit too early, one would say. We weren&amp;rsquo;t in stealth mode for long; 8 weeks, tops.&lt;/p>
&lt;p>Of course, that wasn&amp;rsquo;t a mistake. We didn&amp;rsquo;t accidentally click the &amp;ldquo;publish&amp;rdquo; button on Product Hunt and leak it out. We did this pretty much on purpose. In fact, even before our version 0.1 was released, we had already decided to aim for an early release. It&amp;rsquo;s pretty much by design. Since it&amp;rsquo;s still early and immature, &lt;em>there might be bugs.&lt;/em> I know you probably want to swear already, but bear with me:&lt;/p>
&lt;p>I mean, technically, we could work on it for a much longer period, polish it up, add more features, support more tools, and what have you. But in that case, we might end up with something &lt;em>we&lt;/em> thought is perfect but utterly useless to &lt;em>you&lt;/em>, which is what really matters.&lt;/p>
&lt;p>All we had was an idea. We didn&amp;rsquo;t know &amp;ldquo;how&amp;rdquo;, or even &amp;ldquo;what&amp;rdquo;. All we knew is, we wanted to build something that is useful for the end-users. So why not release it to the users and ask them to tell us what to build and how to build?&lt;/p>
&lt;p>The idea isn&amp;rsquo;t mine, though. It would be arrogant if I said that I invented that. In fact, I learned it from lean manufacturing and agile development. To be honest, if I learned only one thing from lean manufacturing and agile, it&amp;rsquo;s that we should reduce the product-to-customer cycle. It&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/The_Toyota_Way">The Toyota Way&lt;/a>.&lt;/p>
&lt;p>OK, enough rambling. If you are interested in DevStream, simply go to our &lt;a href="https://github.com/devstream-io/devstream">GitHub repo&lt;/a>, follow our README and quickstart, and have a go. I&amp;rsquo;m sure you will have some &amp;ldquo;WTF&amp;rdquo; moments during your first try, in which case, don&amp;rsquo;t hesitate to head to our &lt;a href="https://github.com/devstream-io/devstream/issues">GitHub Issues page&lt;/a> and hit the &amp;ldquo;New Issue&amp;rdquo; button hard. We have prepared a few templates there to help you quickly get your dissatisfaction out of your system. Heck, you can even create an issue about the issue templates themselves. For helpful contributions, we will give you a &amp;ldquo;good first issue&amp;rdquo; label and who knows, probably the marketing team will reach out and award you with a little physical prize as well!&lt;/p>
&lt;hr>
&lt;h2 id="intrigued">Intrigued?&lt;/h2>
&lt;p>Then let&amp;rsquo;s dive a little deeper into it.&lt;/p>
&lt;h3 id="architecture">Architecture&lt;/h3>
&lt;p>A picture is worth a thousand words:&lt;/p>
&lt;p>&lt;img src="https://github.com/devstream-io/devstream/blob/main/docs/images/architecture-overview.png?raw=true" alt="architecture-overview">&lt;/p>
&lt;p>We use the &lt;a href="https://pkg.go.dev/plugin">Go plugin&lt;/a>. I know this is kind of a big topic so here I&amp;rsquo;m only going to talk about it briefly:&lt;/p>
&lt;ul>
&lt;li>First of all, we want to support many DevOps tools, and one tool corresponding to one plugin sounds natural.&lt;/li>
&lt;li>Second of all, although there are other ways to do the &amp;ldquo;core-plugin&amp;rdquo; architecture, we reviewed Go&amp;rsquo;s plugin and it met our needs.&lt;/li>
&lt;li>Oops, I thought there was a &amp;ldquo;third&amp;rdquo; or &amp;ldquo;last but not least&amp;rdquo;, but there isn&amp;rsquo;t. Sorry.&lt;/li>
&lt;/ul>
&lt;h3 id="state">State&lt;/h3>
&lt;p>We consider DevStream (CLI tool &lt;code>dtm&lt;/code>, don&amp;rsquo;t ask me why; it&amp;rsquo;s another whole story. Read &lt;a href="https://github.com/devstream-io/devstream#why-dtm">this&lt;/a> if you enjoy stories) as a &amp;ldquo;&lt;a href="https://en.wikipedia.org/wiki/Finite-state_machine">state machine&lt;/a>&amp;rdquo;.&lt;/p>
&lt;p>Simply put, given input and the current state, DevStream will calculate what to do, so that &amp;ldquo;what you want&amp;rdquo; (what you described in the input) is &amp;ldquo;what you get&amp;rdquo;.&lt;/p>
&lt;p>If you are interested, read more &lt;a href="https://github.com/devstream-io/devstream/blob/main/docs/core_concept.md">here&lt;/a>.&lt;/p>
&lt;h3 id="directory-structure">Directory structure&lt;/h3>
&lt;p>We follow Golang&amp;rsquo;s &lt;a href="https://github.com/golang-standards/project-layout">standard project layout&lt;/a>. But don&amp;rsquo;t click that link, it&amp;rsquo;s too long and too verbose and contains probably many things you don&amp;rsquo;t immediately need right now. Continue to read the TL;DR version:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/cmd&lt;/code>: main applications for this project. &lt;em>Don&amp;rsquo;t put a lot of code in the application directory. If you think the code can be imported and used in other projects, then it should live in the &lt;code>/pkg&lt;/code> directory. If the code is not reusable or if you don&amp;rsquo;t want others to reuse it, put that code in the &lt;code>/internal&lt;/code> directory.&lt;/em>&lt;/li>
&lt;li>&lt;code>/pkg&lt;/code>: library code that&amp;rsquo;s ok to use by external apps. &lt;em>Other projects will import these libs expecting them to work, so think twice before you put something here.&lt;/em>&lt;/li>
&lt;li>&lt;code>/internal&lt;/code>: private application and library code; things you don&amp;rsquo;t want others to import in their own apps.&lt;/li>
&lt;li>&lt;code>/hack&lt;/code>: contains many scripts that ensure continuous development of DevStream. We didn&amp;rsquo;t invent this; we simply stole &lt;a href="https://github.com/kubernetes/kubernetes/tree/master/hack">Kubernetes&amp;rsquo; idea&lt;/a>.&lt;/li>
&lt;li>&lt;code>/build&lt;/code>: packaging and CI-related stuff.&lt;/li>
&lt;li>&lt;code>/docs&lt;/code>: pretty much self-explanatory. Need I say more?&lt;/li>
&lt;li>&lt;code>/examples&lt;/code>: examples for your apps or public libs. Here we use it to store some sample configurations.&lt;/li>
&lt;/ul>
&lt;p>Of course, this isn&amp;rsquo;t the only way to set up a repo structure for a Golang app. If you are a beginner, though, this can save you some time. For example, after reading this, you should know that if you want to find the entrance of the app, you shall look into the &lt;code>cmd&lt;/code> folder. That&amp;rsquo;s where the main app lives.&lt;/p>
&lt;h3 id="core--plugin">Core / Plugin&lt;/h3>
&lt;ul>
&lt;li>Core code: &lt;a href="https://github.com/devstream-io/devstream/tree/main/internal/pkg/pluginengine">https://github.com/devstream-io/devstream/tree/main/internal/pkg/pluginengine&lt;/a>&lt;/li>
&lt;li>Plugins Code: &lt;a href="https://github.com/devstream-io/devstream/tree/main/internal/pkg/plugin">https://github.com/devstream-io/devstream/tree/main/internal/pkg/plugin&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="how-exactly-does-dtm-apply-work-is-it-automatic-or-automagic">How Exactly Does &lt;code>dtm apply&lt;/code> Work? Is it &amp;ldquo;Automatic&amp;rdquo;, or &amp;ldquo;Automagic&amp;rdquo;?&lt;/h3>
&lt;ol>
&lt;li>It all starts with &lt;a href="https://github.com/devstream-io/devstream/blob/main/cmd/devstream/main.go">&lt;code>/cmd/devstream/main.go&lt;/code>&lt;/a>.&lt;/li>
&lt;li>It executes the &lt;code>apply&lt;/code> command in &lt;a href="https://github.com/devstream-io/devstream/blob/main/cmd/devstream/apply.go">&lt;code>/cmd/devstream/apply.go&lt;/code>&lt;/a>.&lt;/li>
&lt;li>The &lt;em>Engine&lt;/em> &lt;a href="https://github.com/devstream-io/devstream/tree/main/internal/pkg/pluginengine">&lt;code>/internal/pkg/pluginengine&lt;/code>&lt;/a> runs the logic for &lt;code>apply&lt;/code> at &lt;a href="https://github.com/devstream-io/devstream/blob/main/internal/pkg/pluginengine/cmd_apply.go">&lt;code>/internal/pkg/pluginengine/cmd_apply.go&lt;/code>&lt;/a>.&lt;/li>
&lt;/ol>
&lt;p>Then, happy digging around in the &amp;ldquo;Apply&amp;rdquo; function!&lt;/p>
&lt;hr>
&lt;h2 id="you-release-waaaaay-too-slow-i-want-the-latest-stuff-now">You Release Waaaaay Too Slow! I WANT THE LATEST STUFF!! NOW!!!&lt;/h2>
&lt;p>Alright, alright, here you go.&lt;/p>
&lt;p>First, install Go. If you haven&amp;rsquo;t done so, please refer to the &lt;a href="https://go.dev/doc/install">official doc here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/devstream-io/devstream.git &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> stream
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go install golang.org/x/tools/cmd/goimports@latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># make sure your GOPATH/bin is in your PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># for example, run this:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">PATH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">`&lt;/span>go env GOPATH&lt;span style="color:#4e9a06">`&lt;/span>/bin:&lt;span style="color:#000">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># after you run &amp;#34;make build&amp;#34;, you DO NOT need to run &amp;#34;dtm init&amp;#34; anymore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># run &amp;#34;dtm apply&amp;#34;, &amp;#34;dtm delete&amp;#34; directly&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># because &amp;#34;init&amp;#34; will try to download plugins from the internet,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># instead of using what you just built&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dtm apply -f path_to_your_config.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="want-more">Want More?&lt;/h2>
&lt;p>Congratulations if you have followed so far. Why not go the extra mile by creating a new plugin of your own and play with it?&lt;/p>
&lt;p>Each plugin needs to implement four interfaces, defined as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/devstream-io/devstream/blob/main/internal/pkg/pluginengine/plugin.go#L12">&lt;code>Create&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/devstream-io/devstream/blob/main/internal/pkg/pluginengine/plugin.go#L13">&lt;code>Read&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/devstream-io/devstream/blob/main/internal/pkg/pluginengine/plugin.go#L14">&lt;code>Update&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/devstream-io/devstream/blob/main/internal/pkg/pluginengine/plugin.go#L16">&lt;code>Delete&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Refer to an existing plugin for more detail. For example, &lt;a href="https://github.com/devstream-io/devstream/blob/main/cmd/argocd/main.go">this one&lt;/a>.&lt;/p>
&lt;p>I know, I know, before you complain, let me tell you this: due to the nature that each plugin is in fact a separate thing from others, there will be some duplicated scaffolding, copying, and pasting when you try to create a new plugin.&lt;/p>
&lt;p>EXCEPT I WON&amp;rsquo;T ALLOW IT TO HAPPEN.&lt;/p>
&lt;p>Good news! We created a tool to make it a whole lot easier for you. NO COPY-PASTE. Run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>dtm develop create-plugin --name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>my-pluing-name-here
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and we will bootstrap the required code, files, and directory structure for you. How about that? Happy hacking, buddy!&lt;/p>
&lt;p>If you enjoy reading this post, please like, comment, and subscribe! I will see you next time.&lt;/p></description></item></channel></rss>